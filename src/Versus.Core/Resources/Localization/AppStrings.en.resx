<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Auth_AlternativeLogin" xml:space="preserve">
    <value>or</value>
  </data>
  <data name="Auth_Email" xml:space="preserve">
    <value>Email address</value>
  </data>
  <data name="Auth_ForgotPassword" xml:space="preserve">
    <value>Forgot password?</value>
  </data>
  <data name="Auth_Login" xml:space="preserve">
    <value>Login</value>
  </data>
  <data name="Auth_Password" xml:space="preserve">
    <value>Password</value>
  </data>
  <data name="Auth_SignIn" xml:space="preserve">
    <value>Sign in</value>
  </data>
  <data name="Auth_Register" xml:space="preserve">
    <value>Register</value>
  </data>
  <data name="Auth_Registration" xml:space="preserve">
    <value>Registration</value>
  </data>
  <data name="Auth_AcceptToS" xml:space="preserve">
    <value>I agree to the</value>
  </data>
  <data name="Auth_ToS" xml:space="preserve">
    <value>Terms and Conditions</value>
  </data>
  <data name="Auth_RepeatPassword" xml:space="preserve">
    <value>Repeat password</value>
  </data>
  <data name="Auth_Age" xml:space="preserve">
    <value>Age</value>
  </data>
  <data name="Auth_CompleteData" xml:space="preserve">
    <value>Complete the data</value>
  </data>
  <data name="Auth_Confirm" xml:space="preserve">
    <value>Confirm</value>
  </data>
  <data name="Auth_Gender" xml:space="preserve">
    <value>Gender</value>
  </data>
  <data name="Auth_Lang" xml:space="preserve">
    <value>Language</value>
  </data>
  <data name="Auth_Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="Auth_Nationality" xml:space="preserve">
    <value>Select your nationality</value>
  </data>
  <data name="Auth_Photo" xml:space="preserve">
    <value>Photo</value>
  </data>
  <data name="Sidebar_Friends" xml:space="preserve">
    <value>Friends</value>
  </data>
  <data name="Sidebar_Home" xml:space="preserve">
    <value>Home</value>
  </data>
  <data name="Sidebar_HowToPlay" xml:space="preserve">
    <value>How to play?</value>
  </data>
  <data name="Sidebar_Matches" xml:space="preserve">
    <value>Matches</value>
  </data>
  <data name="Sidebar_Matchmaking" xml:space="preserve">
    <value>Matchmaking</value>
  </data>
  <data name="Sidebar_Settings" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="Sidebar_Stats" xml:space="preserve">
    <value>Stats</value>
  </data>
  <data name="Auth_Username" xml:space="preserve">
    <value>Username</value>
  </data>
  <data name="HowToPlay_Button" xml:space="preserve">
    <value>How to play ?</value>
  </data>
  <data name="HowToPlay_PreliminaryInformation" xml:space="preserve">
    <value>Preliminary information</value>
  </data>
  <data name="HowToPlay_Step1" xml:space="preserve">
    <value>Step I</value>
  </data>
  <data name="HowToPlay_Step1description" xml:space="preserve">
    <value>In Versus, to start the game, you first find an opponent in the matchmaking tab. You can join the queue, set filters and wait for your opponent to be selected. Another option is to announce a match with the location, description and date, waiting for your opponent's approval or adding to an existing announcement. Announcements enable multiplayer gameplay.</value>
  </data>
  <data name="HowToPlay_Step2" xml:space="preserve">
    <value>Step II</value>
  </data>
  <data name="HowToPlay_Step2description" xml:space="preserve">
    <value>The next step is to go to the "Matches" tab, where you will find all available games approved by us or your opponent. &lt;br&gt;In this section, you can communicate with your opponent via chat, which allows you to set the date and location of the match, as well as accept the match when using the queue filter. </value>
  </data>
  <data name="HowToPlay_Step3" xml:space="preserve">
    <value>Step III</value>
  </data>
  <data name="HowToPlay_Step3description" xml:space="preserve">
    <value>The last stage is to verify the match using a mobile application at the match venue.&lt;br&gt;To do this, select the current match in the "Matches" tab and scan the QR code using the opponent's device. Thanks to this, it will be possible to start the match. After the match ends, enter the result and scan the QR code again, which will confirm the official result of the game. For announcements, team leaders enter the results.</value>
  </data>
  <data name="HowToPlay_VersusDescription" xml:space="preserve">
    <value>Versus is an application aimed at joint sports games between players. Thanks to it, we can meet new people and experience a lot of interesting sports matches. Compete with friends, improve your skills and climb the Versus rank.</value>
  </data>
  <data name="HowToPlay_HaveFun" xml:space="preserve">
    <value>Have fun!</value>
  </data>
  <data name="HowToPlay_LetsStart" xml:space="preserve">
    <value>Let's get started</value>
  </data>
  <data name="Matchmaking_SoloDescription" xml:space="preserve">
    <value>Join the queue, customize the filters and choose the opponent</value>
  </data>
  <data name="Matchmaking_Team" xml:space="preserve">
    <value>Team/Solo</value>
  </data>
  <data name="Matchmaking_TeamDescription" xml:space="preserve">
    <value>Create or join the sports room</value>
  </data>
  <data name="Sidebar_LogOut" xml:space="preserve">
    <value>Log out</value>
  </data>
  <data name="Matchmaking_Age" xml:space="preserve">
    <value>Age</value>
  </data>
  <data name="Matchmaking_Beginner" xml:space="preserve">
    <value>Beginner</value>
  </data>
  <data name="Matchmaking_ChooseGame" xml:space="preserve">
    <value>Choose game</value>
  </data>
  <data name="Matchmaking_Game" xml:space="preserve">
    <value>Game</value>
  </data>
  <data name="Matchmaking_Level" xml:space="preserve">
    <value>Level</value>
  </data>
  <data name="Matchmaking_Master" xml:space="preserve">
    <value>Master</value>
  </data>
  <data name="Matchmaking_OpponentGender" xml:space="preserve">
    <value>Opponent gender</value>
  </data>
  <data name="Matchmaking_ShowResult" xml:space="preserve">
    <value>Show result</value>
  </data>
  <data name="Matchmaking_Any" xml:space="preserve">
    <value>Any</value>
  </data>
  <data name="Matchmaking_Men" xml:space="preserve">
    <value>Men</value>
  </data>
  <data name="Matchmaking_Women" xml:space="preserve">
    <value>Women</value>
  </data>
</root>