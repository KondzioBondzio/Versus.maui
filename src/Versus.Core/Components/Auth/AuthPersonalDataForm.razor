@using Versus.Core.Exceptions
@using Versus.Core.Services.Countries
@using Versus.Core.Resources.Localization
@using Microsoft.Extensions.Localization
@using Versus.Core.Services.Session
@using MudBlazor
@inject IStringLocalizer<AppStrings> Localizer
@inject CountryService CountryService
@inject NavigationManager NavManager
@page "/AuthPersonalDataForm"

<div class="row">
    <div class="col-12 col-md-8 col-lg-6 col-xl-4 mx-auto">
        <div class="row">
            <div class="col-6 col-md-8 col-lg-6 col-xl-4 mx-auto">
                <img src="_content/Versus.Core/images/VersusLogo.png" class="img-fluid" alt="app_logo" />
            </div>
        </div>
        <div class="card vs-bg-primary">
            <div class="card-body">
                <div class="text-center mb-5">
                    <h3>
                        <div>
                            <i class="fas fa-user" style="color:white"></i>
                        </div>
                        <span class="vs-text-shadow">@Localizer["Auth_Login"]</span>
                    </h3>
                </div>      <MudGrid>

                    <MudItem xs="12" sm="6" md="4">
                        <MudAutocomplete T="string" Label="US States" @bind-Value="value1" SearchFunc="@Search1" Variant="MudBlazor.Variant.Outlined" ShowProgressIndicator="true" />
                    </MudItem>
                </MudGrid>
                <EditForm EditContext="_editContext" OnValidSubmit="Submit" FormName="FormLogin">
                    <div class="mb-2">
                        <InputText @bind-Value="Model!.Nickname" type="email" class="vs-form-style" placeholder="@Localizer["Auth_Email"]" />
                    </div>
                    <MudGrid>

                        <MudItem xs="12" sm="6" md="4">
                            <MudAutocomplete T="string" Label="US States" @bind-Value="value1" SearchFunc="@Search1" Variant="MudBlazor.Variant.Outlined" ShowProgressIndicator="true" />
                        </MudItem>
                    </MudGrid>
                    <div class="mb-2">
                        <InputText @bind-Value="Model!.Name" type="password" class="vs-form-style" placeholder="@Localizer["Auth_Password"]" />
                    </div>

                    <MudSelect  T="string" Label="Wybierz kraj" Placeholder="Wyszukaj kraj..." @bind-Value="selectedCountry" SearchFunc="@SearchCountries">
                        @foreach (var country in countries)
                        {
                            <MudSelectItem Value="@country.Code">@country.Name</MudSelectItem>
                        }
                    </MudSelect>

                    <div class="text-center mt-3">
                        <RadzenButton Text="@Localizer["Auth_SignIn"]" ButtonType="Radzen.ButtonType.Submit" class="btn py-3 w-100 w-md-auto" ButtonStyle="ButtonStyle.Secondary" />
                    </div>
                </EditForm>
                <MudGrid>

                <MudItem xs="12" sm="6" md="4">
                    <MudAutocomplete T="string" Label="US States" @bind-Value="value1" SearchFunc="@Search1" Variant="MudBlazor.Variant.Outlined" ShowProgressIndicator="true" />
                </MudItem>
           </MudGrid>

            </div>
        </div>
    </div>
</div>
@code {


    private string value1;
    private string[] states =
    {
        "Alabama", "Alaska", "American Samoa", "Arizona",
        "Arkansas", "California", "Colorado", "Connecticut",
        "Delaware", "District of Columbia", "Federated States of Micronesia",
        "Florida", "Georgia", "Guam", "Hawaii", "Idaho",
        "Illinois", "Indiana", "Iowa", "Kansas", "Kentucky",
        "Louisiana", "Maine", "Marshall Islands", "Maryland",
        "Massachusetts", "Michigan", "Minnesota", "Mississippi",
        "Missouri", "Montana", "Nebraska", "Nevada",
        "New Hampshire", "New Jersey", "New Mexico", "New York",
        "North Carolina", "North Dakota", "Northern Mariana Islands", "Ohio",
        "Oklahoma", "Oregon", "Palau", "Pennsylvania", "Puerto Rico",
        "Rhode Island", "South Carolina", "South Dakota", "Tennessee",
        "Texas", "Utah", "Vermont", "Virgin Island", "Virginia",
        "Washington", "West Virginia", "Wisconsin", "Wyoming",
    };

    private async Task<IEnumerable<string>> Search1(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(3);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return states;
        return states.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }




    private string selectedCountry;
    private IEnumerable<Country> countries;// Załaduj swoje kraje tutaj

    private EditContext? _editContext;

    protected override async Task OnInitializedAsync()
    {
        countries = await CountryService.GetCountriesAsync();
    }

    private Func<string, Task<IEnumerable<string>>> SearchCountries => async (searchText) =>
    {
    return await Task.FromResult(countries.Where(c => c.Name.Contains(searchText, StringComparison.InvariantCultureIgnoreCase))
                                           .Select(c => c.Code));
    };
    [SupplyParameterFromForm]
    public AuthPersonalDataViewModel? Model { get; set; }

    private ValidationMessageStore? _validationStore;

    protected override void OnInitialized()
    {
        Model ??= new AuthPersonalDataViewModel();
        _editContext = new EditContext(Model);
        _editContext.OnValidationRequested += HandleValidationRequested;
    }

    private void HandleValidationRequested(object? sender, ValidationRequestedEventArgs e)
    {
        _validationStore?.Clear();

        // handle validation
    }

    private void Submit()
    {
        try
        {
         
           
        }
        catch (ApiException)
        {
            // handle error codes
        }
    }

    public void Dispose()
    {
        if (_editContext is not null)
        {
            _editContext.OnValidationRequested -= HandleValidationRequested;
        }
    }


}
