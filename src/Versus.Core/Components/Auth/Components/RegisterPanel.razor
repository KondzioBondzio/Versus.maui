@using Versus.Core.Services.Session
@using Versus.Core.Resources.Localization
@using Microsoft.Extensions.Localization
@using Versus.Core.Exceptions
@implements IDisposable
@inject IStringLocalizer<AppStrings> Localizer

<div class="">
    <div class="text-center mb-5">
        <h2>
            <div>
                <i class="fas fa-user"></i>
            </div>
            <span>@Localizer["Auth_Registration"]</span>
        </h2>
    </div>
    <EditForm EditContext="_editContext" OnValidSubmit="Submit" FormName="FormRegister">
        <div class="mb-2">
            <label class="form-label d-block text-center">@Localizer["Auth_Email"]</label>
            <InputText @bind-Value="Model!.Login" type="email" class="form-control text-center" placeholder="@Localizer["Auth_Email"]"/>
        </div>

        <div class="mb-2">
            <label class="form-label d-block text-center">@Localizer["Auth_Password"]</label>
            <InputText @bind-Value="Model!.Password" type="password" class="form-control text-center" placeholder="@Localizer["Auth_Password"]"/>
        </div>

        <div class="mb-3 form-check">
            <InputCheckbox @bind-Value="Model!.AcceptedTos" class="form-check-input"/>
            <label class="form-check-label">
                <span>@Localizer["Auth_AcceptToS"]</span>
                <a href="#" class="text-primary">@Localizer["Auth_ToS"]</a>
            </label>
        </div>

        <div class="text-center mt-3">
            <button type="submit" class="btn btn-primary py-3 w-100 w-md-auto">@Localizer["Auth_Register"]</button>
        </div>
    </EditForm>
</div>

@code {

    private EditContext? _editContext;

    [SupplyParameterFromForm]
    public RegisterViewModel? Model { get; set; }

    private ValidationMessageStore? _validationStore;

    protected override void OnInitialized()
    {
        Model ??= new RegisterViewModel();
        _editContext = new EditContext(Model);
        _editContext.OnValidationRequested += HandleValidationRequested;
    }

    private void HandleValidationRequested(object? sender, ValidationRequestedEventArgs e)
    {
        _validationStore?.Clear();

        // handle validation
    }

    private void Submit()
    {
        try
        {
            // ...
        }
        catch (ApiException)
        {
            // handle error codes
        }
    }

    public void Dispose()
    {
        if (_editContext is not null)
        {
            _editContext.OnValidationRequested -= HandleValidationRequested;
        }
    }

}
