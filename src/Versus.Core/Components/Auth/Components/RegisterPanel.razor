@using Versus.Core.Services.Session
@implements IDisposable

<div class="">
    <div class="text-center mb-5">
        <h3>           
            <div>
                <i class="fas fa-user" style="color:white"></i>
            </div>
            <span class="vs-text-shadow">@Localizer["Auth_Registration"]</span>
        </h3>
    </div>
    <EditForm EditContext="_editContext" OnValidSubmit="Submit" FormName="FormRegister">
        <div class="mb-2">
            <InputText @bind-Value="Model!.Login" type="email" class="vs-form-style" placeholder="@Localizer["Auth_Email"]" />
        </div>

        <div class="mb-2">    
            <InputText @bind-Value="Model!.Password" type="password" class="vs-form-style" placeholder="@Localizer["Auth_Password"]" />
        </div>
        <div class="mb-2">
            <InputText @bind-Value="Model!.RepeatPassword" type="password" class="vs-form-style" placeholder="@Localizer["Auth_RepeatPassword"]" />
        </div>

        <div class="mb-3 mt-3 form-check">
            <InputCheckbox @bind-Value="Model!.AcceptedTos" class="form-check-input"/>
            <label class="form-check-label">
                <span class="vs-white" style="font-size:small">@Localizer["Auth_AcceptToS"]</span>
                <a href="#" class="vs-link">@Localizer["Auth_ToS"]</a>
            </label>
        </div>

        <div class="text-center mt-3">
            <RadzenButton Text="@Localizer["Auth_Register"]" class="btn py-3 w-100 w-md-auto" ButtonType="Radzen.ButtonType.Submit" ButtonStyle="ButtonStyle.Secondary" />
        </div>
    </EditForm>

</div>

@code {

    private EditContext? _editContext;

    [SupplyParameterFromForm]
    public RegisterViewModel? Model { get; set; }

    private ValidationMessageStore? _validationStore;

    protected override void OnInitialized()
    {
        Model ??= new RegisterViewModel();
        _editContext = new EditContext(Model);
        _editContext.OnValidationRequested += HandleValidationRequested;
    }

    private void HandleValidationRequested(object? sender, ValidationRequestedEventArgs e)
    {
        _validationStore?.Clear();

        // handle validation
    }

    private void Submit()
    {
        try
        {
            NavManager.NavigateTo("/AuthPersonalDataForm");
        }
        catch (ApiException)
        {
            // handle error codes
        }
    }


    public void Dispose()
    {
        if (_editContext is not null)
        {
            _editContext.OnValidationRequested -= HandleValidationRequested;
        }
    }

}
